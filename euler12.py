#!/usr/bin/python
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

from util import chronometer
from util import count_factors

@chronometer
def problem_12(threeshold):
	i = 1
	triangle_number = 0
	while True:
		triangle_number += i
		#print triangle_number, ':',len(factorize(triangle_number)), ':', '-'.join(map(str, factorize(triangle_number)))
		if count_factors(triangle_number) >= threeshold:
			return triangle_number
		i += 1

print problem_12(500)
